{
  "contractName": "IBrandRegistry",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaverse",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brandId",
          "type": "address"
        }
      ],
      "name": "brandMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brandId",
          "type": "address"
        }
      ],
      "name": "brandExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brandId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "onBrandOwnerChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brandId\",\"type\":\"address\"}],\"name\":\"brandExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brandId\",\"type\":\"address\"}],\"name\":\"brandMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaverse\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brandId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"onBrandOwnerChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"brandExists(address)\":{\"notice\":\"Tells whether an address corresponds to a registered brand or not.\"},\"brandMetadataURI(address)\":{\"notice\":\"Assembles the whole metadata for a brand. WARNING: This method will consume a lot of gas if invoked inside a transaction, so it is recommended to invoke this method in the context of a CALL, and never in the context of a SEND (even as part of other contract's code).\"},\"metaverse()\":{\"notice\":\"The metaverse that will own this brand registry.\"},\"onBrandOwnerChanged(address,address)\":{\"notice\":\"A hook to execute when the owner of a brand changed.\"}},\"notice\":\"A contract satisfying this interface will have capabilities to query the existing brands' existence or metadata.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/lingr/brands/IBrandRegistry.sol\":\"IBrandRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"project:/contracts/lingr/brands/IBrandRegistry.sol\":{\"keccak256\":\"0x382c93244ef491342e8ddfea6ddda891e604b8dbe34b5ebf3f4800b75e677af8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57f66a0a8816382a5261ee50ead73fc409a6441f3a9a092d71d53190a42148fd\",\"dweb:/ipfs/QmNhgJWtKiaDQu9KWGeN4HN7QnpiQhQjcQerXeJMh3jnXh\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8 <0.9.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * A contract satisfying this interface will have capabilities\n * to query the existing brands' existence or metadata.\n */\ninterface IBrandRegistry is IERC165 {\n    /**\n     * The metaverse that will own this brand registry.\n     */\n    function metaverse() external view returns (address);\n\n    /**\n     * Assembles the whole metadata for a brand. WARNING: This method\n     * will consume a lot of gas if invoked inside a transaction, so\n     * it is recommended to invoke this method in the context of a\n     * CALL, and never in the context of a SEND (even as part of other\n     * contract's code).\n     */\n    function brandMetadataURI(address _brandId) external view returns (string memory);\n\n    /**\n     * Tells whether an address corresponds to a registered brand or not.\n     */\n    function brandExists(address _brandId) external view returns (bool);\n\n    /**\n     * A hook to execute when the owner of a brand changed.\n     */\n    function onBrandOwnerChanged(address _brandId, address _newOwner) external;\n}\n",
  "sourcePath": "/home/luismasuelli/Projects/OuterMaze/lingr-contracts/contracts/lingr/brands/IBrandRegistry.sol",
  "ast": {
    "absolutePath": "project:/contracts/lingr/brands/IBrandRegistry.sol",
    "exportedSymbols": {
      "IBrandRegistry": [
        4475
      ],
      "IERC165": [
        2228
      ]
    },
    "id": 4476,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4440,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:29:16"
      },
      {
        "absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "id": 4441,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4476,
        "sourceUnit": 2229,
        "src": "63:65:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4443,
              "name": "IERC165",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2228,
              "src": "285:7:16"
            },
            "id": 4444,
            "nodeType": "InheritanceSpecifier",
            "src": "285:7:16"
          }
        ],
        "canonicalName": "IBrandRegistry",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 4442,
          "nodeType": "StructuredDocumentation",
          "src": "130:126:16",
          "text": " A contract satisfying this interface will have capabilities\n to query the existing brands' existence or metadata."
        },
        "fullyImplemented": false,
        "id": 4475,
        "linearizedBaseContracts": [
          4475,
          2228
        ],
        "name": "IBrandRegistry",
        "nameLocation": "267:14:16",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 4445,
              "nodeType": "StructuredDocumentation",
              "src": "299:67:16",
              "text": " The metaverse that will own this brand registry."
            },
            "functionSelector": "f200670d",
            "id": 4450,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "metaverse",
            "nameLocation": "380:9:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4446,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "389:2:16"
            },
            "returnParameters": {
              "id": 4449,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4448,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4450,
                  "src": "415:7:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4447,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "415:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "414:9:16"
            },
            "scope": 4475,
            "src": "371:53:16",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 4451,
              "nodeType": "StructuredDocumentation",
              "src": "430:313:16",
              "text": " Assembles the whole metadata for a brand. WARNING: This method\n will consume a lot of gas if invoked inside a transaction, so\n it is recommended to invoke this method in the context of a\n CALL, and never in the context of a SEND (even as part of other\n contract's code)."
            },
            "functionSelector": "9896c31d",
            "id": 4458,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "brandMetadataURI",
            "nameLocation": "757:16:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4454,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4453,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "782:8:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4458,
                  "src": "774:16:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4452,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "774:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "773:18:16"
            },
            "returnParameters": {
              "id": 4457,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4456,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4458,
                  "src": "815:13:16",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4455,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "815:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "814:15:16"
            },
            "scope": 4475,
            "src": "748:82:16",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 4459,
              "nodeType": "StructuredDocumentation",
              "src": "836:85:16",
              "text": " Tells whether an address corresponds to a registered brand or not."
            },
            "functionSelector": "7d5555df",
            "id": 4466,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "brandExists",
            "nameLocation": "935:11:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4462,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4461,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "955:8:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4466,
                  "src": "947:16:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4460,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "947:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "946:18:16"
            },
            "returnParameters": {
              "id": 4465,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4464,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4466,
                  "src": "988:4:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4463,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "988:4:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "987:6:16"
            },
            "scope": 4475,
            "src": "926:68:16",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 4467,
              "nodeType": "StructuredDocumentation",
              "src": "1000:71:16",
              "text": " A hook to execute when the owner of a brand changed."
            },
            "functionSelector": "8cd6e9a9",
            "id": 4474,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "onBrandOwnerChanged",
            "nameLocation": "1085:19:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4472,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4469,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "1113:8:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4474,
                  "src": "1105:16:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4468,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1105:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4471,
                  "mutability": "mutable",
                  "name": "_newOwner",
                  "nameLocation": "1131:9:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4474,
                  "src": "1123:17:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4470,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1123:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1104:37:16"
            },
            "returnParameters": {
              "id": 4473,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1150:0:16"
            },
            "scope": 4475,
            "src": "1076:75:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 4476,
        "src": "257:896:16",
        "usedErrors": []
      }
    ],
    "src": "32:1122:16"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/lingr/brands/IBrandRegistry.sol",
    "exportedSymbols": {
      "IBrandRegistry": [
        4475
      ],
      "IERC165": [
        2228
      ]
    },
    "id": 4476,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4440,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:29:16"
      },
      {
        "absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "id": 4441,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 4476,
        "sourceUnit": 2229,
        "src": "63:65:16",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4443,
              "name": "IERC165",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 2228,
              "src": "285:7:16"
            },
            "id": 4444,
            "nodeType": "InheritanceSpecifier",
            "src": "285:7:16"
          }
        ],
        "canonicalName": "IBrandRegistry",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 4442,
          "nodeType": "StructuredDocumentation",
          "src": "130:126:16",
          "text": " A contract satisfying this interface will have capabilities\n to query the existing brands' existence or metadata."
        },
        "fullyImplemented": false,
        "id": 4475,
        "linearizedBaseContracts": [
          4475,
          2228
        ],
        "name": "IBrandRegistry",
        "nameLocation": "267:14:16",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 4445,
              "nodeType": "StructuredDocumentation",
              "src": "299:67:16",
              "text": " The metaverse that will own this brand registry."
            },
            "functionSelector": "f200670d",
            "id": 4450,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "metaverse",
            "nameLocation": "380:9:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4446,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "389:2:16"
            },
            "returnParameters": {
              "id": 4449,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4448,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4450,
                  "src": "415:7:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4447,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "415:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "414:9:16"
            },
            "scope": 4475,
            "src": "371:53:16",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 4451,
              "nodeType": "StructuredDocumentation",
              "src": "430:313:16",
              "text": " Assembles the whole metadata for a brand. WARNING: This method\n will consume a lot of gas if invoked inside a transaction, so\n it is recommended to invoke this method in the context of a\n CALL, and never in the context of a SEND (even as part of other\n contract's code)."
            },
            "functionSelector": "9896c31d",
            "id": 4458,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "brandMetadataURI",
            "nameLocation": "757:16:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4454,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4453,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "782:8:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4458,
                  "src": "774:16:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4452,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "774:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "773:18:16"
            },
            "returnParameters": {
              "id": 4457,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4456,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4458,
                  "src": "815:13:16",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4455,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "815:6:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "814:15:16"
            },
            "scope": 4475,
            "src": "748:82:16",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 4459,
              "nodeType": "StructuredDocumentation",
              "src": "836:85:16",
              "text": " Tells whether an address corresponds to a registered brand or not."
            },
            "functionSelector": "7d5555df",
            "id": 4466,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "brandExists",
            "nameLocation": "935:11:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4462,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4461,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "955:8:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4466,
                  "src": "947:16:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4460,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "947:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "946:18:16"
            },
            "returnParameters": {
              "id": 4465,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4464,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4466,
                  "src": "988:4:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4463,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "988:4:16",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "987:6:16"
            },
            "scope": 4475,
            "src": "926:68:16",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 4467,
              "nodeType": "StructuredDocumentation",
              "src": "1000:71:16",
              "text": " A hook to execute when the owner of a brand changed."
            },
            "functionSelector": "8cd6e9a9",
            "id": 4474,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "onBrandOwnerChanged",
            "nameLocation": "1085:19:16",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4472,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4469,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "1113:8:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4474,
                  "src": "1105:16:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4468,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1105:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4471,
                  "mutability": "mutable",
                  "name": "_newOwner",
                  "nameLocation": "1131:9:16",
                  "nodeType": "VariableDeclaration",
                  "scope": 4474,
                  "src": "1123:17:16",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4470,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1123:7:16",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1104:37:16"
            },
            "returnParameters": {
              "id": 4473,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1150:0:16"
            },
            "scope": 4475,
            "src": "1076:75:16",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 4476,
        "src": "257:896:16",
        "usedErrors": []
      }
    ],
    "src": "32:1122:16"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.10+commit.fc410830.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2022-08-08T03:06:07.067Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "brandExists(address)": {
        "notice": "Tells whether an address corresponds to a registered brand or not."
      },
      "brandMetadataURI(address)": {
        "notice": "Assembles the whole metadata for a brand. WARNING: This method will consume a lot of gas if invoked inside a transaction, so it is recommended to invoke this method in the context of a CALL, and never in the context of a SEND (even as part of other contract's code)."
      },
      "metaverse()": {
        "notice": "The metaverse that will own this brand registry."
      },
      "onBrandOwnerChanged(address,address)": {
        "notice": "A hook to execute when the owner of a brand changed."
      }
    },
    "notice": "A contract satisfying this interface will have capabilities to query the existing brands' existence or metadata.",
    "version": 1
  }
}