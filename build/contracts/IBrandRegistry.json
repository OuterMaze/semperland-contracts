{
  "contractName": "IBrandRegistry",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brandId",
          "type": "address"
        }
      ],
      "name": "brandMetadataURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brandId",
          "type": "address"
        }
      ],
      "name": "brandExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brandId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "onBrandOwnerChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brandId",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_permission",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isBrandAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brandId",
          "type": "address"
        }
      ],
      "name": "isCommitted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brandId\",\"type\":\"address\"}],\"name\":\"brandExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brandId\",\"type\":\"address\"}],\"name\":\"brandMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brandId\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_permission\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isBrandAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brandId\",\"type\":\"address\"}],\"name\":\"isCommitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brandId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"onBrandOwnerChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"brandExists(address)\":{\"notice\":\"Tells whether an address corresponds to a registered brand or not.\"},\"brandMetadataURI(address)\":{\"notice\":\"Assembles the whole metadata for a brand. WARNING: This method will consume a lot of gas if invoked inside a transaction, so it is recommended to invoke this method in the context of a CALL, and never in the context of a SEND (even as part of other contract's code).\"},\"isBrandAllowed(address,bytes32,address)\":{\"notice\":\"Tells whether a user has a specific permission on a specific brand or it is allowed by the brand's ownership.\"},\"isCommitted(address)\":{\"notice\":\"Tells whether the address is a committed brand, or not (this may also be caused by the address not being a brand).\"},\"onBrandOwnerChanged(address,address)\":{\"notice\":\"A hook to execute when the owner of a brand changed.\"}},\"notice\":\"A contract satisfying this interface will have capabilities to query the existing brands' existence or metadata.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/lingr/brands/IBrandRegistry.sol\":\"IBrandRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"project:/contracts/lingr/brands/IBrandRegistry.sol\":{\"keccak256\":\"0x2333eca7404fa2dc595c902c4b694b3b9d9568a005faa5153ec43cbf8578b953\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://19d6bab53a1e8dfb87f964c836c0018841157aeb2d35d438457c7aa60bc46038\",\"dweb:/ipfs/QmYYtuWmfV411sZBFPH1ntDQPrc8JHqusfDWUVBoDdht6M\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8 <0.9.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * A contract satisfying this interface will have capabilities\n * to query the existing brands' existence or metadata.\n */\ninterface IBrandRegistry {\n    /**\n     * Assembles the whole metadata for a brand. WARNING: This method\n     * will consume a lot of gas if invoked inside a transaction, so\n     * it is recommended to invoke this method in the context of a\n     * CALL, and never in the context of a SEND (even as part of other\n     * contract's code).\n     */\n    function brandMetadataURI(address _brandId) external view returns (string memory);\n\n    /**\n     * Tells whether an address corresponds to a registered brand or not.\n     */\n    function brandExists(address _brandId) external view returns (bool);\n\n    /**\n     * A hook to execute when the owner of a brand changed.\n     */\n    function onBrandOwnerChanged(address _brandId, address _newOwner) external;\n\n    /**\n     * Tells whether a user has a specific permission on a specific brand\n     * or it is allowed by the brand's ownership.\n     */\n    function isBrandAllowed(address _brandId, bytes32 _permission, address _sender) external view returns (bool);\n\n    /**\n     * Tells whether the address is a committed brand, or not\n     * (this may also be caused by the address not being a brand).\n     */\n    function isCommitted(address _brandId) external view returns (bool);\n}\n",
  "sourcePath": "/home/luismasuelli/Projects/OuterMaze/lingr-contracts/contracts/lingr/brands/IBrandRegistry.sol",
  "ast": {
    "absolutePath": "project:/contracts/lingr/brands/IBrandRegistry.sol",
    "exportedSymbols": {
      "IBrandRegistry": [
        3506
      ],
      "IERC165": [
        808
      ]
    },
    "id": 3507,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3459,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:29:14"
      },
      {
        "absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "id": 3460,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3507,
        "sourceUnit": 809,
        "src": "63:65:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IBrandRegistry",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 3461,
          "nodeType": "StructuredDocumentation",
          "src": "130:126:14",
          "text": " A contract satisfying this interface will have capabilities\n to query the existing brands' existence or metadata."
        },
        "fullyImplemented": false,
        "id": 3506,
        "linearizedBaseContracts": [
          3506
        ],
        "name": "IBrandRegistry",
        "nameLocation": "267:14:14",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 3462,
              "nodeType": "StructuredDocumentation",
              "src": "288:313:14",
              "text": " Assembles the whole metadata for a brand. WARNING: This method\n will consume a lot of gas if invoked inside a transaction, so\n it is recommended to invoke this method in the context of a\n CALL, and never in the context of a SEND (even as part of other\n contract's code)."
            },
            "functionSelector": "9896c31d",
            "id": 3469,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "brandMetadataURI",
            "nameLocation": "615:16:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3465,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3464,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "640:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3469,
                  "src": "632:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3463,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "632:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "631:18:14"
            },
            "returnParameters": {
              "id": 3468,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3467,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3469,
                  "src": "673:13:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3466,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "673:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "672:15:14"
            },
            "scope": 3506,
            "src": "606:82:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3470,
              "nodeType": "StructuredDocumentation",
              "src": "694:85:14",
              "text": " Tells whether an address corresponds to a registered brand or not."
            },
            "functionSelector": "7d5555df",
            "id": 3477,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "brandExists",
            "nameLocation": "793:11:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3473,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3472,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "813:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3477,
                  "src": "805:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3471,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "805:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "804:18:14"
            },
            "returnParameters": {
              "id": 3476,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3475,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3477,
                  "src": "846:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3474,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "846:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "845:6:14"
            },
            "scope": 3506,
            "src": "784:68:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3478,
              "nodeType": "StructuredDocumentation",
              "src": "858:71:14",
              "text": " A hook to execute when the owner of a brand changed."
            },
            "functionSelector": "8cd6e9a9",
            "id": 3485,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "onBrandOwnerChanged",
            "nameLocation": "943:19:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3483,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3480,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "971:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3485,
                  "src": "963:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3479,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "963:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3482,
                  "mutability": "mutable",
                  "name": "_newOwner",
                  "nameLocation": "989:9:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3485,
                  "src": "981:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3481,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "981:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "962:37:14"
            },
            "returnParameters": {
              "id": 3484,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1008:0:14"
            },
            "scope": 3506,
            "src": "934:75:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3486,
              "nodeType": "StructuredDocumentation",
              "src": "1015:135:14",
              "text": " Tells whether a user has a specific permission on a specific brand\n or it is allowed by the brand's ownership."
            },
            "functionSelector": "40cde613",
            "id": 3497,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isBrandAllowed",
            "nameLocation": "1164:14:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3493,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3488,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "1187:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3497,
                  "src": "1179:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3487,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1179:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3490,
                  "mutability": "mutable",
                  "name": "_permission",
                  "nameLocation": "1205:11:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3497,
                  "src": "1197:19:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 3489,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1197:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3492,
                  "mutability": "mutable",
                  "name": "_sender",
                  "nameLocation": "1226:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3497,
                  "src": "1218:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3491,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1218:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1178:56:14"
            },
            "returnParameters": {
              "id": 3496,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3495,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3497,
                  "src": "1258:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3494,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1258:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1257:6:14"
            },
            "scope": 3506,
            "src": "1155:109:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3498,
              "nodeType": "StructuredDocumentation",
              "src": "1270:140:14",
              "text": " Tells whether the address is a committed brand, or not\n (this may also be caused by the address not being a brand)."
            },
            "functionSelector": "15b80df8",
            "id": 3505,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isCommitted",
            "nameLocation": "1424:11:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3501,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3500,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "1444:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3505,
                  "src": "1436:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3499,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1436:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1435:18:14"
            },
            "returnParameters": {
              "id": 3504,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3503,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3505,
                  "src": "1477:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3502,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1477:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1476:6:14"
            },
            "scope": 3506,
            "src": "1415:68:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3507,
        "src": "257:1228:14",
        "usedErrors": []
      }
    ],
    "src": "32:1454:14"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/lingr/brands/IBrandRegistry.sol",
    "exportedSymbols": {
      "IBrandRegistry": [
        3506
      ],
      "IERC165": [
        808
      ]
    },
    "id": 3507,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3459,
        "literals": [
          "solidity",
          ">=",
          "0.8",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:29:14"
      },
      {
        "absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
        "id": 3460,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3507,
        "sourceUnit": 809,
        "src": "63:65:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IBrandRegistry",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 3461,
          "nodeType": "StructuredDocumentation",
          "src": "130:126:14",
          "text": " A contract satisfying this interface will have capabilities\n to query the existing brands' existence or metadata."
        },
        "fullyImplemented": false,
        "id": 3506,
        "linearizedBaseContracts": [
          3506
        ],
        "name": "IBrandRegistry",
        "nameLocation": "267:14:14",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 3462,
              "nodeType": "StructuredDocumentation",
              "src": "288:313:14",
              "text": " Assembles the whole metadata for a brand. WARNING: This method\n will consume a lot of gas if invoked inside a transaction, so\n it is recommended to invoke this method in the context of a\n CALL, and never in the context of a SEND (even as part of other\n contract's code)."
            },
            "functionSelector": "9896c31d",
            "id": 3469,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "brandMetadataURI",
            "nameLocation": "615:16:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3465,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3464,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "640:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3469,
                  "src": "632:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3463,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "632:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "631:18:14"
            },
            "returnParameters": {
              "id": 3468,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3467,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3469,
                  "src": "673:13:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3466,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "673:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "672:15:14"
            },
            "scope": 3506,
            "src": "606:82:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3470,
              "nodeType": "StructuredDocumentation",
              "src": "694:85:14",
              "text": " Tells whether an address corresponds to a registered brand or not."
            },
            "functionSelector": "7d5555df",
            "id": 3477,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "brandExists",
            "nameLocation": "793:11:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3473,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3472,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "813:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3477,
                  "src": "805:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3471,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "805:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "804:18:14"
            },
            "returnParameters": {
              "id": 3476,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3475,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3477,
                  "src": "846:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3474,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "846:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "845:6:14"
            },
            "scope": 3506,
            "src": "784:68:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3478,
              "nodeType": "StructuredDocumentation",
              "src": "858:71:14",
              "text": " A hook to execute when the owner of a brand changed."
            },
            "functionSelector": "8cd6e9a9",
            "id": 3485,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "onBrandOwnerChanged",
            "nameLocation": "943:19:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3483,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3480,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "971:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3485,
                  "src": "963:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3479,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "963:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3482,
                  "mutability": "mutable",
                  "name": "_newOwner",
                  "nameLocation": "989:9:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3485,
                  "src": "981:17:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3481,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "981:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "962:37:14"
            },
            "returnParameters": {
              "id": 3484,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1008:0:14"
            },
            "scope": 3506,
            "src": "934:75:14",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3486,
              "nodeType": "StructuredDocumentation",
              "src": "1015:135:14",
              "text": " Tells whether a user has a specific permission on a specific brand\n or it is allowed by the brand's ownership."
            },
            "functionSelector": "40cde613",
            "id": 3497,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isBrandAllowed",
            "nameLocation": "1164:14:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3493,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3488,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "1187:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3497,
                  "src": "1179:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3487,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1179:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3490,
                  "mutability": "mutable",
                  "name": "_permission",
                  "nameLocation": "1205:11:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3497,
                  "src": "1197:19:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 3489,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1197:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3492,
                  "mutability": "mutable",
                  "name": "_sender",
                  "nameLocation": "1226:7:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3497,
                  "src": "1218:15:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3491,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1218:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1178:56:14"
            },
            "returnParameters": {
              "id": 3496,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3495,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3497,
                  "src": "1258:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3494,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1258:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1257:6:14"
            },
            "scope": 3506,
            "src": "1155:109:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 3498,
              "nodeType": "StructuredDocumentation",
              "src": "1270:140:14",
              "text": " Tells whether the address is a committed brand, or not\n (this may also be caused by the address not being a brand)."
            },
            "functionSelector": "15b80df8",
            "id": 3505,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isCommitted",
            "nameLocation": "1424:11:14",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3501,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3500,
                  "mutability": "mutable",
                  "name": "_brandId",
                  "nameLocation": "1444:8:14",
                  "nodeType": "VariableDeclaration",
                  "scope": 3505,
                  "src": "1436:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3499,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1436:7:14",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1435:18:14"
            },
            "returnParameters": {
              "id": 3504,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3503,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3505,
                  "src": "1477:4:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 3502,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1477:4:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1476:6:14"
            },
            "scope": 3506,
            "src": "1415:68:14",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3507,
        "src": "257:1228:14",
        "usedErrors": []
      }
    ],
    "src": "32:1454:14"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.10+commit.fc410830.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2022-11-14T00:30:26.532Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "brandExists(address)": {
        "notice": "Tells whether an address corresponds to a registered brand or not."
      },
      "brandMetadataURI(address)": {
        "notice": "Assembles the whole metadata for a brand. WARNING: This method will consume a lot of gas if invoked inside a transaction, so it is recommended to invoke this method in the context of a CALL, and never in the context of a SEND (even as part of other contract's code)."
      },
      "isBrandAllowed(address,bytes32,address)": {
        "notice": "Tells whether a user has a specific permission on a specific brand or it is allowed by the brand's ownership."
      },
      "isCommitted(address)": {
        "notice": "Tells whether the address is a committed brand, or not (this may also be caused by the address not being a brand)."
      },
      "onBrandOwnerChanged(address,address)": {
        "notice": "A hook to execute when the owner of a brand changed."
      }
    },
    "notice": "A contract satisfying this interface will have capabilities to query the existing brands' existence or metadata.",
    "version": 1
  }
}